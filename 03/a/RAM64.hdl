// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load,sel=address[3..5],a=selA,b=selB,c=selC,d=selD,e=selE,f=selF,g=selG,h=selH);
    RAM8(in=in,load=selA,out=outA,address=address[0..2]);
    RAM8(in=in,load=selB,out=outB,address=address[0..2]);
    RAM8(in=in,load=selC,out=outC,address=address[0..2]);
    RAM8(in=in,load=selD,out=outD,address=address[0..2]);
    RAM8(in=in,load=selE,out=outE,address=address[0..2]);
    RAM8(in=in,load=selF,out=outF,address=address[0..2]);
    RAM8(in=in,load=selG,out=outG,address=address[0..2]);
    RAM8(in=in,load=selH,out=outH,address=address[0..2]);
    Mux8Way16(a=outA,b=outB,c=outC,d=outD,e=outE,f=outF,g=outG,h=outH,sel=address[3..5],out=out);
}
